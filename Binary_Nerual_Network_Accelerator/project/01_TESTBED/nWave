#!/bin/sh
#
# fileName : .wrapper
#
# 1).get Novas <installed_dir>
#

PATH="/bin:$PATH"
CAT="/bin/cat"

# SPS0291599
unset LD_ASSUME_KERNEL;
# SPS0290505
NOVAS_SYNC_MOTIF_DISP="";
export NOVAS_SYNC_MOTIF_DISP;

DEV_NULL="/dev/null";
RH6_72=0;
if [ -f /etc/redhat-release ]; then
    egrep "Red Hat (Enterprise Linux (.S|Client|Workstation|Server|ComputeNode)|Desktop) release (6.|7.1|7.2)" /etc/redhat-release > $DEV_NULL 2>&1;
    status=$?
    if [ $status = 0 ]; then
        RH6_72=1;
    fi
fi


MALLOC_ARENA_BY_CORE=1;
## setup MALLOC_ARENA_MAX value with CPU Core on RH6~7.2 only.
if [ $MALLOC_ARENA_BY_CORE = 1 -a $RH6_72 = 1 ]; then
    CPU_CORES=$(grep -c ^processor /proc/cpuinfo);
    if [ $CPU_CORES -lt 1 ]; then
        CPU_CORES=1;
    fi
    VAL_MALLOC_ARENA_MAX=$CPU_CORES;
else
    VAL_MALLOC_ARENA_MAX=1;
fi

#VERDI_MALLOC_ARENA_MAX_OVERRIDE to override MALLOC_ARENA_MAX
if [ -z "$VERDI_MALLOC_ARENA_MAX_OVERRIDE" ]; then
    #No environment VERDI_MALLOC_ARENA_MAX_OVERRIDE
    #9001381887 Reduce virtual memory allocation for RH6~7.2(glic2.1)
    MALLOC_ARENA_MAX=$VAL_MALLOC_ARENA_MAX;
    export MALLOC_ARENA_MAX;
elif [ $VERDI_MALLOC_ARENA_MAX_OVERRIDE -lt 1 ]; then
    #do nothing.
    echo "No setup environment variable MALLOC_ARENA_MAX"
else 
    #9001381887 Reduce virtual memory allocation for RH6~7.2(glic2.1)
    MALLOC_ARENA_MAX=$VERDI_MALLOC_ARENA_MAX_OVERRIDE;
    export MALLOC_ARENA_MAX;
fi


  __dir=`dirname $0`
  if [ "$__dir" = "." ]; then
    __dir=`cd $__dir/.. ; /bin/pwd`
  else
    __dir=`dirname $__dir`
  fi

  SYS_INST_DIR=$__dir;
  SPS_FONT_PATH="$SYS_INST_DIR/font";
  # XFont - SPS0117984
  SPS_XFONT_PATH="$SYS_INST_DIR/XFont";

#
# 2).parsing user's command and special setting
#
   __cmdname=`basename $0`;

   SYS_PROG_NAME=$__cmdname;

   # Auto Source user envirnoment from .specman
   __auto_source=${NOVAS_SPECMAN_AUTO_SOURCE:=None}
   if [ "$__auto_source" = "1" ]; then
     if [ -f $HOME/.specman ]; then
        . $HOME/.specman;
     fi
     if [ -f .specman ]; then
        . .specman;
     fi
   fi

   # For gdb, valgrind, and vdCov
   skip_sim=0
   invoke_verdi=0
   invoke_perf=0
   invoke_vdCov=0
   invoke_iCSA=0
   invoke_arch=0
   invoke_valgrind=0
   invoke_cgdb=0
   invoke_gdb=0
   invoke_gdb1=0
   invoke_ddd=0
   invoke_rca=0
   invoke_tracediff_fast_mode=0
   invoke_xpess=0
   invoke_collect=0
   invoke_walker=0
   collect_option=""
   valgrind_option=""
   invoke_undodb=0
   invoke_undogdb=0
   original_argv=("$@") # Keep original options of command-line in order to restore later if it's necessary.
   argv=()
   while [[ $# -gt 0 ]]
   do
      key=$1
      case $key in
         -helgrind)
            ##"no-nptl-pthread-stackcache" disabling the cache helps to avoid false positive race conditions, in particular when using thread local storage variables (e.g. variables using the __thread qualifier).
            invoke_valgrind=1
            valgrind_option="--tool=helgrind --num-callers=30 --sim-hints=no-nptl-pthread-stackcache"
         ;;
         -valgrind)
            invoke_valgrind=1
            valgrind_option="--workaround-gcc296-bugs=yes --leak-check=no"
         ;;
         -callgrind)
            invoke_valgrind=1
            valgrind_option="--tool=callgrind --log-file=callgrind.log"
         ;;
         -massif)
            invoke_valgrind=1
            valgrind_option="--tool=massif"
         ;;
         -ddd)
            invoke_ddd=1
         ;;
         -cgdb)
            invoke_cgdb=1
         ;;
         -gdb)
            invoke_gdb=1
         ;;
         -gdb1)
            invoke_gdb1=1
         ;;
         -undodb)
            invoke_undodb=1
         ;;
         -undogdb)
            invoke_undogdb=1
         ;;
         -container)
            export SNPS_CONTAINER=1
         ;;
         -cov)
            invoke_vdCov=1
            SYS_PROG_NAME="vdCov"
         ;;
         #-iCSA)
            #if [ "$VERDI_RUN_ICSA1" = 1 ] ; then
            #   invoke_iCSA=1
            #else
         #      VERDI_ICSA2_BETA=1
         #      export VERDI_ICSA2_BETA
            #fi
         #;;
         #-emulation)
         #      VERDI_ICSA2_BETA=1
         #      export VERDI_ICSA2_BETA
         #      argv+=("$key")
         #;;
         -simXL)
               VERDI_ICSA2_BETA=1
               export VERDI_ICSA2_BETA
               argv+=("$key")
         ;;
         -arch32)
            invoke_arch=32
         ;;
         -rca)
            if [ x"$__cmdname" == x"tracediff" ]; then
              invoke_rca=1
            else
              argv+=("$key")
            fi
         ;;
         -fast_mode)
            if [ x"$__cmdname" == x"tracediff" ]; then
              invoke_tracediff_fast_mode=1
            else
              argv+=("$key")
            fi
         ;;
         -xpess)
              invoke_xpess=1
              argv+=("$key")
         ;;
         -xpessCfg)
              invoke_xpess=1
              argv+=("$key")
         ;;
         -collect*)
            collect_option=`echo $key | sed -e 's/-collect//' | sed -e 's/=//'`;
            invoke_collect=1
            PURIFY_POOL_ARENA=1;
            PURIFY_POOL_ARENA_SILENCE=1;
            export PURIFY_POOL_ARENA;
            export PURIFY_POOL_ARENA_SILENCE;
            #argv+=("$key")
            #echo "collect debug message..."
            #echo $key
            #echo $collect_option
         ;;
         -walker)
            invoke_walker=1
         ;;
         *)
            argv+=("$key")
         ;;
      esac
      shift
   done

   ## SPS0149212
   LANG="C";
   export LANG;
   LC_ALL="C";
   export LC_ALL;
   ## SPS0238765
   XMODIFIERS="@im=none";
   export XMODIFIERS;

   ## STAR9001305501
   if [ -z "$VCS_RUNNING_REGRESSION" ] && [ -z "$VCS_RUNNING_BENCHMARK" ] && [ -z "$FSDB_RUNNING_REGRESSION" ] && [ -z "$FSDB_RUNNING_BENCHMARK" ] && [ -z "$ZEBU_RUNNING_REGRESSION" ] && [ -z "$ZEBU_RUNNING_BENCHMARK" ] && [ -z "$SIMP_RUNNING_REGRESSION" ] && [ -z "$SIMP_RUNNING_BENCHMARK" ] && [ -z "$RUNNING_VERA_REGRESSION" ] && [ -z "$RUNNING_VERA_BENCHMARK" ] && [ -z "$NOVAS_NO_MLP" ] ; then
     if [ -f "/fs/src/interfaces/ApacheLibs/ML_Platform/latest/mlplatform/bin/mlp_upload" ] ; then
       MLP_HOME="/fs/src/interfaces/ApacheLibs/ML_Platform/latest/mlplatform";
       export MLP_HOME;
     fi
   fi

   ### SPS0115997
   #__lang=${LANG};
   #if [ "$__lang" = "ja_JP.UTF-8" ]; then
   #     LANG="ja";
   #     export LANG;
   #fi

   #__lc_all=${LC_ALL};
   #if [ "$__lc_all" = "ja_JP.UTF-8" ]; then
   #     LC_ALL="ja";
   #     export LC_ALL;
   #fi

   #P10049895-54871 enable (enVerdi_LCA_list=1) on Beta release only. 
   enVerdi_LCA_list=0
   if [ ${enVerdi_LCA_list} = 1 ] ; then
      if [ -z "$VERDI_LCA_LST_OVERRIDE" ]; then
            if [ -f "${SYS_INST_DIR}/bin/VerdiLCALstEn" ]; then      
                . ${SYS_INST_DIR}/bin/VerdiLCALstEn 
            fi
      else 
            if [ -f "${VERDI_LCA_LST_OVERRIDE}" ]; then      
                . ${VERDI_LCA_LST_OVERRIDE}
            else 
                echo "Wrong setup environment variable VERDI_LCA_LST_OVERRIDE"
            fi
      fi
   fi

#
# 3).get platform
#
   ##
   ## SPSqa53294 Novas run 32-bit executable binary
   ## If no 64-bits install path, will run 32-bits path as default.
   __exec_arch=${NOVAS_EXECUTABLE_ARCH};
   if [ "$invoke_arch" = "32" ]; then
   	__exec_arch="32";
   fi
   __machine=`uname -s -r`;
   case "$__machine" in
    "SunOS 5.10"*)
        __machine_set=`/bin/isainfo -kv|awk '{print $1}'`
        __machine_type=`uname -p`
	if [ "$__machine_type" = "i386" ]; then
		__NAME="SOLAMD64";
	elif [ "$__machine_type" = "x86_64" ]; then
		__NAME="SOLAMD64";
        elif [ "$__exec_arch" = "32" ]; then
                __NAME="SOLARIS2";
        elif [ "$__exec_arch" = "64" ]; then
                __NAME="SOL7";
        elif [ "$__machine_set" = "64-bit" ] \
            && [ -r $SYS_INST_DIR/platform/SOL7/bin ]; then
                __NAME="SOL7";
        else
                __NAME="SOLARIS2";
        fi
	    ;;
    "SunOS 5.9"*)
        __machine_set=`/bin/isainfo -kv|awk '{print $1}'`
	if [ "$__exec_arch" = "32" ]; then
		__NAME="SOLARIS2";
	elif [ "$__exec_arch" = "64" ]; then
		__NAME="SOL7";
        elif [ "$__machine_set" = "64-bit" ] \
            && [ -r $SYS_INST_DIR/platform/SOL7/bin ]; then
                __NAME="SOL7";
	else
		__NAME="SOLARIS2";
	fi
	    ;;
    "SunOS 5.8"*)
	__machine_set=`/bin/isainfo -kv|awk '{print $1}'`
	if [ "$__exec_arch" = "32" ]; then
		__NAME="SOLARIS2";
	elif [ "$__exec_arch" = "64" ]; then
		__NAME="SOL7";
	elif [ "$__machine_set" = "64-bit" ] \
	    && [ -r $SYS_INST_DIR/platform/SOL7/bin ]; then
     		__NAME="SOL7";
	else
		__NAME="SOLARIS2";
	fi
	    ;;
    "SunOS 5.7"*)
	__machine_set=`/bin/isainfo -kv|awk '{print $1}'`
	if [ "$__exec_arch" = "32" ]; then
		__NAME="SOLARIS2";
	elif [ "$__exec_arch" = "64" ]; then
		__NAME="SOL7";
	elif [ "$__machine_set" = "64-bit" ] \
	    && [ -r $SYS_INST_DIR/platform/SOL7/bin ]; then
	        symbol=`/usr/ccs/bin/nm /usr/lib/sparcv9/libCrun.so.1 | grep _ex_register64`;
	        sym=`echo $symbol|awk '{print $5}'`
	        if [ "$sym" = "|GLOB" ]; then
	             __NAME="SOL7";
	        else
		     echo "*ERROR* -- OS compatibility problem"
                     echo "     The version of Solaris 7 you are running contains a problem in"
                     echo "   library libCrun.so.1. Specifically, the symbol _ex_register64 is"
                     echo "   declared as a local (LOCL) symbol in this library instead of a"
                     echo "   global (GLOB) symbol as expected. You must upgrade to Solaris 7"
                     echo "   version SunOS 5.7 Generic 106541-17 June 2001 or later in order"
                     echo "   to run Novas on this system. Alternatively, you can download"
                     echo "   and run the 32-bit (SOL2) version of Novas and use it instead."
		     exit 1
	        fi
	else
	       __NAME="SOLARIS2";
	fi
	    ;;
    "SunOS 5"*)
	if [ "$__exec_arch" = "32" ]; then
		__NAME="SOLARIS2";
	elif [ "$__exec_arch" = "64" ]; then
		__NAME="SOL7";
	else
     		__NAME="SOLARIS2";
	fi
	    ;;
    "Linux"*)
	 if [ -r /etc/SuSE-release ]; then
         	__machine_set=`uname -m`
         	if [ "$__exec_arch" = "32" ]; then
		    __NAME="SUSE32";
         	elif [ "$__exec_arch" = "64" -a "$__machine_set" = ia64 ] \
            	&& [ -r $SYS_INST_DIR/platform/SUSE64/bin ]; then
		    __NAME="SUSE64";
         	elif [ "$__exec_arch" = "64" -a "$__machine_set" = x86_64 ] \
            	&& [ -r $SYS_INST_DIR/platform/SUSE64/bin ]; then
		    __NAME="SUSE64";
         	elif [ "$__machine_set" = x86_64 ] \
            	&& [ -r $SYS_INST_DIR/platform/SUSE64/bin ]; then
		    __NAME="SUSE64";
         	else
		    __NAME="SUSE32";
         	fi
	 else
	 	__machine_set=`uname -m`
         	if [ "$__machine_set" = "aarch64" ]; then
                    __NAME="aarch64";
         	elif [ "$__exec_arch" = "32" ]; then
		    __NAME="LINUX";
         	elif [ "$__exec_arch" = "64" -a "$__machine_set" = ia64 ] \
            	&& [ -r $SYS_INST_DIR/platform/LINUXIA64/bin ]; then
		    __NAME="LINUXIA64";
         	elif [ "$__exec_arch" = "64" -a "$__machine_set" = x86_64 ] \
            	&& [ -r $SYS_INST_DIR/platform/LINUX64/bin ]; then
		    __NAME="LINUXAMD64";
         	elif [ "$__machine_set" = ia64 ] \
            	&& [ -r $SYS_INST_DIR/platform/LINUXIA64/bin ]; then
		    __NAME="LINUXIA64";
         	elif [ "$__machine_set" = x86_64 ] \
            	&& [ -r $SYS_INST_DIR/platform/LINUX64/bin ]; then
		    __NAME="LINUXAMD64";
         	else
		    __NAME="LINUX";
         	fi
	fi
            ;;
    "FreeBSD"*)
     __NAME="LINUX";
            ;;
    "HP-UX B.10"*)
	if [ "$__exec_arch" = "32" ]; then
		__NAME="HPPA";
	elif [ "$__exec_arch" = "64" ]; then
		__NAME="HP11";
	else
     		__NAME="HPPA";
	fi
            ;;
    "HP-UX B.11"*)
	if [ "$__exec_arch" = "32" ]; then
		__NAME="HPPA";
	elif [ "$__exec_arch" = "64" ]; then
		__NAME="HP11";
	elif [ -r $SYS_INST_DIR/platform/HP11/bin ] \
             && [ -x /bin/getconf ] \
             && [ "`/bin/getconf KERNEL_BITS 2>&1`" = "64" ]; then
		__NAME="HP11";
	else
     		__NAME="HPPA";
	fi
            ;;
     "AIX"*)
	__system_version=`uname -v`
	if [ "$__system_version" \> "4" ]; then
	        if [ "$__exec_arch" = "32" ]; then
        	        __NAME="IBM51";
	        elif [ "$__exec_arch" = "64" ]; then
        	        __NAME="IBM64";
      #                  LDR_CNTRL="MAXDATA=0x200000000";
      #                  export LDR_CNTRL;
	        elif [ -r $SYS_INST_DIR/platform/IBM64/bin ] \
        	     && [ -x /usr/sbin/prtconf ] \
	             && [ "`/usr/sbin/prtconf -c`" = "CPU Type: 64-bit" ]; then
	                __NAME="IBM64";
      #                  LDR_CNTRL="MAXDATA=0x200000000";
      #                  export LDR_CNTRL;
	        else
	               # SPSqa78465 - Check if IBM43 is supported
	                __NAME="IBM51";
		fi
	else
		echo "IBM43 is not supported"
		exit 1
	fi
            ;;
    *)
     __NAME="UNKNOW";
   ;;
   esac

#  echo "platform=$__NAME";
#
# 4).make new command
#
   case "$__cmdname" in
    "iCSA")
    #if [ "$VERDI_RUN_ICSA1" = 1 ] ; then
    #    newname="$SYS_INST_DIR/platform/$__NAME/bin/iCSA";
    #else
        VERDI_ICSA2_BETA=1
        export VERDI_ICSA2_BETA
        newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas";
    #fi
    ;;
    "verdi_perf")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -batch";
    invoke_perf=1;
    ;;
    "nCompare")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -nCompare";
    ;;
    "ncmp")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -nCompare";
    ;;
    "nCompareg")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -nCompare -gui";
    ;;
    "Siloti")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -licsiloti";
    ;;
    "siloti")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -licsiloti";
    ;;
    "Verdi")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas";
    invoke_verdi=1
    skip_sim=1
    ;;
    "verdi")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas";
    invoke_verdi=1
    skip_sim=1
    ;;
    "Verdi-3")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas";
    invoke_verdi=1
    ;;
    "Verdi-SX")
    #echo "'Verdi-SX' command is obsolete. Suggest to use Verdi."
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -SX";
    invoke_verdi=1
    ;;
    "Verdi-Ultra")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -Ultra";
    invoke_verdi=1
    ;;
    "Novas")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas";
    invoke_verdi=1
    ;;
    "novas")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas";
    invoke_verdi=1
    ;;
    "VerdiJP")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -encode eucjp";
    ;;
    "Verdi_dl")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas_dl -encode eucjp";
    ;;
    "nWave")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -nWave";
    ;;
    "turboWave")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -nWave";
    ;;
    "Debussy")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -deb";
    ;;
    "debussy")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -deb";
    ;;
    "esa")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -ESA -batch -stdout -ba -ba_incr 0 -cont_ba_err";
    ;;
    "bacom")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -BACOM -batch -stdout";
    ;;
    "fast")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/vfast";
    ;;
    "vcd2fsdb")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/vfast";
    ;;
    "eclipse")
    newname="$SYS_INST_DIR/share/eclipse/$__NAME/eclipse";
    ;;
    "java")
    newname="$SYS_INST_DIR/share/jre/$__NAME/bin/java";
    ;;
    "tracediff"|"traceDiff")
    if [ $invoke_cgdb -ne 0 ]; then
      invoke_cgdb=0
      argv+=("-cgdb")
    elif [ $invoke_gdb -ne 0 ]; then
      invoke_gdb=0
      argv+=("-gdb")
    elif [ $invoke_gdb1 -ne 0 ]; then
      invoke_gdb1=0
      argv+=("-gdb1")
    fi
    if [ $invoke_rca -ne 0 ]; then
      newname="$SYS_INST_DIR/platform/$__NAME/bin/rca.py";
    elif [ $invoke_tracediff_fast_mode -ne 0 ]; then
      newname="$SYS_INST_DIR/platform/$__NAME/bin/tracediff.py FAST_MODE $SYS_INST_DIR";
    else # tracediff
      newname="$SYS_INST_DIR/platform/$__NAME/bin/tracediff.py TRACEDIFF $SYS_INST_DIR/platform/$__NAME/bin/Novas -TRACEMIS -batch -stdout";
    fi
    ;;
    "fsdbswanalysis"|"fsdbSwAnalysis"|"waveSwAnalysis"|"waveswanalysis")#9001399486 support ZWD change naming
    newname="$SYS_INST_DIR/platform/$__NAME/bin/fsdbSwAnalysisWrapper.py";
    ;;
    "tracex"|"traceX")
    if [ $invoke_xpess -ne 0 ]; then
      if [ $XPESS_BIN_FLOW ]; then #phase out xpess bin flow and controlled by XPESS_BIN_FLOW
        echo "XPESS trigger by bin flow" 
        newname="$SYS_INST_DIR/platform/$__NAME/bin/run_xpess -TRACEX -batch";
      else #xpess default use lib flow
        echo "XPESS trigger by shareLib flow" 
        if [ ! "$PYTHONPATH" ]; then
          PYTHONPATH="$SYS_INST_DIR/share/autoRCA";
          echo "Use DEFAULT PYTHONPATH:$PYTHONPATH"
          export PYTHONPATH;
        else
          echo "OVERWRITE user specified PYTHONPATH:$PYTHONPATH"
        fi
        newname="$SYS_INST_DIR/platform/$__NAME/bin/runXpess.py -TRACEX -batch";
      fi
    else # tracex
      newname="$SYS_INST_DIR/platform/$__NAME/bin/Novas -TRACEX -batch";
    fi
    ;;
    "autorca"|"AutoRCA")
      PYTHON=/depot/Python-3.6.2/bin/python
      if [ ! -f $PYTHON ]; then
        PYTHON=python3
      fi
      newname="$PYTHON -u $SYS_INST_DIR/platform/$__NAME/bin/rcaIntgrFlow/run.py"
    ;;
    "verdiPlay")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/verdiPlay";
    ;;
    "wavrep")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/wavrep";
    ;;
    "ccdvd")
    LD_LIBRARY_PATH="$SYS_INST_DIR/share/NPI/lib/$__NAME:$LD_LIBRARY_PATH";
    PATH="$SYS_INST_DIR/bin/:$PATH";
    newname="$SYS_INST_DIR/platform/$__NAME/bin/ccdvd";
    ;;
    "syncrm_exe")
    LD_LIBRARY_PATH="$SYS_INST_DIR/share/syncrm:$LD_LIBRARY_PATH";
    newname="$SYS_INST_DIR/platform/$__NAME/bin/syncrm_exe";
    ;;
    onefind*)
    LD_LIBRARY_PATH="$SYS_INST_DIR/share/onesearch/$__NAME:$SYS_INST_DIR/share/onesearch/$__NAME/pylib27:$LD_LIBRARY_PATH";
    PYTHONPATH="$SYS_INST_DIR/share/onesearch/$__NAME/pylib27";
    export PYTHONPATH;
    PYTHONHOME="$SYS_INST_DIR/share/onesearch";
    export PYTHONHOME;
    newname="$SYS_INST_DIR/platform/$__NAME/bin/$__cmdname";
    ;;
    "SAE_dump_spec_values_run")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/saeutil --SAE_dump_spec_values_run";
    ;;
    "merge_plan_run")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/saeutil --merge_plan_run";
    ;;
    "hvp2hvp")
    newname="$SYS_INST_DIR/platform/$__NAME/bin/saeutil --hvp2hvp";
    ;;
    "novas_plat")
    echo $__NAME
    exit 0
    ;;
    *)
    newname="$SYS_INST_DIR/platform/$__NAME/bin/$__cmdname";
    ;;
   esac
   export SYS_INST_DIR; export SYS_PROG_NAME;
   export SPS_FONT_PATH;
   export SPS_XFONT_PATH;
   export SPECMAN_HOME;
   export SPECMAN_PATH;
   export LD_LIBRARY_PATH_OVERRIDE;
   VERDI_ORIGNAL_LD_LIBRARY_PATH="$LD_LIBRARY_PATH";
   export VERDI_ORIGNAL_LD_LIBRARY_PATH;

#DO NOT INCLUDE $LD_LIBRARY_PATH_OVERRIDE if contain space only.
   if [[ $LD_LIBRARY_PATH_OVERRIDE = *[!\ ]* ]]; then
   LD_LIBRARY_PATH="$LD_LIBRARY_PATH_OVERRIDE:$SYS_INST_DIR/platform/$__NAME/bin:$SYS_INST_DIR/platform/$__NAME/lib/Qt:$SYS_INST_DIR/platform/$__NAME/lib/tbb:$SYS_INST_DIR/etc/lib/libstdc++/$__NAME:$SYS_INST_DIR/share/NPI/lib/$__NAME:$LD_LIBRARY_PATH";
   else
   LD_LIBRARY_PATH="$SYS_INST_DIR/platform/$__NAME/bin:$SYS_INST_DIR/platform/$__NAME/lib/Qt:$SYS_INST_DIR/platform/$__NAME/lib/tbb:$SYS_INST_DIR/etc/lib/libstdc++/$__NAME:$SYS_INST_DIR/share/NPI/lib/$__NAME:$LD_LIBRARY_PATH";
   fi

   export LD_LIBRARY_PATH;
   LD_NOVERSION=1;
   export LD_NOVERSION;
# SPS0222572
   SPS_RGB_PATH="$SYS_INST_DIR/etc/rgb";
   export SPS_RGB_PATH;

#9000923241
   QT_PLUGIN_PATH="$SYS_INST_DIR/platform/$__NAME/lib/Qt/plugins";
   export QT_PLUGIN_PATH;



#
# 5).setup on-line-help path:
#
   NOVASHLPPATH="$SYS_INST_DIR/doc";
   export NOVASHLPPATH;
   XNLSPATH="$SYS_INST_DIR/etc/access/nls";
   export XNLSPATH;

#
# 6).exec Novas product
#
   if [ ${invoke_verdi} = 0 ] ; then
   	invoke_vdCov=0
        invoke_iCSA=0
   fi
   if [ "$VERDI_ICSA2_BETA" = 1 ] ; then
        invoke_iCSA=0
   fi

   if [ "$invoke_valgrind" != 1 ] ; then
       if [ "$VERDI_HELGRIND" = 1 ] ; then
            invoke_valgrind=1
            valgrind_option="--tool=helgrind --num-callers=30 --sim-hints=no-nptl-pthread-stackcache"
       fi
   fi

   if [ ${invoke_verdi} = 1 ] ; then
       if [ "$invoke_valgrind" != 1 ] ; then
           if [ "$VERDI_RUN_VGD" = 1 ] ; then
               invoke_valgrind=1
               valgrind_option="--workaround-gcc296-bugs=yes --leak-check=no"
               if [ "$VERDI_VGD_LOG" != "" ] ; then
                   valgrind_option="$valgrind_option --log-file=$VERDI_VGD_LOG"
               fi
           fi
       fi
   fi
   if [ "$invoke_valgrind" = 1 ] ; then
       if [ "$VERDI_VGD_OPT" != "" ] ; then
           valgrind_option="$VERDI_VGD_OPT"
       fi
   fi

   if [ "${SNPS_INFRA_INTERNAL_VERDI_VALGRIND}" == "1" ]; then
       invoke_valgrind=1
       if [ ! -z "${VALGRIND_OPTIONS}" ]; then
           valgrind_option="${VALGRIND_OPTIONS}"
       else   # should never reach this loop.
           valgrind_option="--workaround-gcc296-bugs=yes --leak-check=no"
           if [ "$VERDI_VGD_LOG" != "" ] ; then
               valgrind_option="$valgrind_option --log-file=$VERDI_VGD_LOG"
           fi
       fi
   fi

   if [ "${VERDI_DIAGTOOL}" == "collect" ]; then
        invoke_collect=1 
   fi

   if [ ! -z "${VERDI_COLLECT_OPT}" ]; then
        collect_option="${VERDI_COLLECT_OPT}" 
   fi

   printPerHelp()
   {
      echo "Usage: verdi_perf [verdi_options] [options]"
      echo "    Fsdb file and instances need to be specified before doing performance evaluation."
      echo "    Fsdb file and instances could be set in command line options or in command file."
      echo "    If both start and end time are specified, end time must be greater than start time."
      echo "    Specify the evaluation configuration either in command line options or in the command file."
      echo "    Do not use -cmd/-c with other options, they are mutually exclusive."
      echo "    Use -h for detailed help."
      echo " "
      echo " " 

      echo "Options:"
      echo "    -fsdb,-f            Specify the fsdb file, optional."
      echo "    -instance,-i        Specify the instances, optional."
      echo "    -protocol,-p        Specify the protocol, optional."
      echo "    -start,-s           Specify the start time, optional."
      echo "    -end,-e             Specify the end time, optional."
      echo "    -cmd,-c             Specify the command file, optional. Mutually exclusive with other options."
      echo "    -output,-o          Specify the output file name, optional, default is \"output\"."
      echo "    -format,-m          Specify the output file format, \"csv\" or \"html\", optional, default is \"csv\"."
      echo "    -session,-n         Specify the session saving option, \"on\", \"off\" or \"fail\", optional, default is \"fail\"." 
      echo "    -db,-d              Aggregate test result operation, specify the result database." 
      echo "    -add,-a             Aggregate test result operation, add a FSDB file into the database." 
      echo "    -force,-w           Aggregate test result operation, overwrite if file existing in database." 
      echo "    -remove,-r          Aggregate test result operation, remove a FSDB file from the database." 
      echo "    -info,-t            Aggregate test result operation, print general information for database."
      echo "    -help,-h            Print this help information."
      echo " "                
      echo " "                
                             
      echo "Verdi Options:"  
      echo "    -licdebug            Dump license diagnostic information to the console. Only for license debugging."
      echo "    -ultra,-Ultra        Advanced mode to access latest features."
      echo " "
      echo " "       
   }

   if [ ${invoke_perf} = 1 ] ; then
      file=""
      instance=""
      protocol=""
      start=""
      end=""
      config=""
      output=""
      format=""
      session=""
      db=""
      add=""
      remove=""
      force=""
      info=""
	  ultraMode=""
	  sxMode="1"
	  verdiPackageMode=""
	  
      set -- "${original_argv[@]}" # Restore the options of command-line for below process.
      while (($#>0)) 
      do
        case $1 in
          "-help"|"-h")
          printPerHelp
          exit 0;;

          "-fsdb"|"-f") 
          if [ "$file" != "" ]; then
              echo "Multiple \"-fsdb/-f\" options specified."
              exit 1
          fi

          shift
          file=$1
          ;;

          "-instance"|"-i") 
          if [ "$instance" != "" ]; then
              echo "Multiple \"-instance/-i\" options specified."
              exit 1
          fi

          shift
          instance=$1
          ;;
          
          "-protocol"|"-p") 
          if [ "$protocol" != "" ]; then
              echo "Multiple \"-protocol/-p\" options specified."
              exit 1
          fi

          shift
          protocol=$1
          ;;

          "-ultra"|"-Ultra") 
          if [ "$ultraMode" != "" ]; then
              echo "Multiple \"-ultra\" options specified."
              exit 1
          fi
          ultraMode=1
          verdiPackageMode=-ultra
          ;;

		  "-sx"|"-SX") 
          if [ "$sxMode" != "" ]; then
              echo "Performance Analyzer is not supported in Verdi-SX mode."
              exit 1
          fi
          sxMode=1
          verdiPackageMode=-sx
          ;;

          "-start"|"-s") 
          if [ "$start" != "" ]; then
              echo "Multiple \"-start/-s\" options specified."
              exit 1
          fi

          shift
          start=$1
          ;;

          "-end"|"-e")
          if [ "$end" != "" ]; then
              echo "Multiple \"-end/-e\" options specified."
              exit 1
          fi
 
          shift
          end=$1
          ;;

          "-cmd"|"-c")
          if [ "$config" != "" ]; then
              echo "Multiple \"-cmd/-c\" options specified."
              exit 1
          fi

          shift
          config=$1
          ;;

          "-output"|"-o")
          if [ "$output" != "" ]; then
              echo "Multiple \"-output/-o\" options specified."
              exit 1
          fi

          shift
          output=$1
          ;;

          "-format"|"-m")
          if [ "$format" != "" ]; then
              echo "Multiple \"-format/-m\" options specified."
              exit 1
          fi

          shift
          format=$1
          ;;

          "-session"|"-n")
          if [ "$session" != "" ]; then
              echo "Multiple \"-session/-n\" options specified."
              exit 1
          fi

          shift
          session=$1
          ;;

          "-db"|"-d")
          if [ "$db" != "" ]; then
              echo "Multiple \"-db/-d\" options specified."
              exit 1
          fi

          shift
          db=$1
          ;;

          "-add"|"-a")
          if [ "$add" != "" ]; then
              echo "Multiple \"-add/-a\" options specified."
              exit 1
          fi

          shift
          add=$1
          ;;

          "-fdNum")
          shift
          newname="$newname -fdNum $1"
          ;;

          "-force"|"-w")
          force="1"
          ;;

          "-info"|"-t")
          info="1"
          ;;

          "-licdebug")
          newname="$newname -licdebug"
          ;;

          "-helgrind"|"-valgrind"|"-callgrind"|"-massif")
          ;;

          "-remove"|"-r")
          if [ "$remove" != "" ]; then
              echo "Multiple \"-remove/-r\" options specified."
              exit 1
          fi

          shift
          remove=$1
          ;;

          "-"|"-")
          shift
          ;;

          *)
          echo "Wrong parameter \"$1\"."
          echo ""
          printPerHelp
          exit 1;;
        esac

        shift
      done
      
      if [ "$config" != "" ]; then
         if [ "$file" != "" -o "$instance" != "" -o "$start" != "" -o "$end" != "" -o "$output" != "" -o "$format" != "" ]; then
            echo "Specify the evaluation configuration either in command line options or in the command file."
            echo "Do not use \"-cmd/-c\" with other options, they are mutually exclusive."
            echo ""
            printPerHelp
            exit 1
         fi
      fi
     
     if [ "$config" != "" ]; then
       if grep -q "paPerformanceCreateWnd"  $config; then 
          echo "Configuration file format is not correct, please provide the valid configuration file."
          echo ""
          exit 1 
         
       fi
     fi
           
      if [ "$start" != "" -a "$end" != "" ]; then
         if [ $((start)) -ge $((end)) ]; then
            echo "Invalid time range, end time must be greater than start time."
            echo ""
            printPerHelp
            exit 1
         fi
      fi

      if [ "$config" != "" -a ! -f "$config" ]; then
         echo "Config file $config does not exist."
         echo ""
         printPerHelp
         exit 1
      fi

      if [ "$db" != "" ]; then
         if [ "$file" != "" ]; then
            echo "Options \"-fsdb/-f\" is not valid in aggregate test result flow."
            echo "Do not use it with \"-db/-d\", they are mutually exclusive."
            echo ""
            printPerHelp
            exit 1
         fi

         if [ "$add" != "" -a "$remove" != "" ]; then
            echo "Both \"-add/-a\" and \"-remove/-r\" are specified, please remove one of them."
            echo ""
            printPerHelp
            exit 1
         fi

         if [ "$add" = "" -a "$remove" = "" -a "$protocol" != "" -a -d "$db"  ]; then
            echo "Database $db exists, please specify another database name."
            echo ""
            printPerHelp
            exit 1
         fi 

         if [ "$add" = "" -a "$remove" = "" -a "$protocol" = "" -a ! -d "$db"  ]; then
            echo "Database $db does not exists, please specify another database name."
            echo ""
            printPerHelp
            exit 1
         fi 
         
         if [ "$add" = "" -a "$remove" = "" -a "$protocol" = "" ]; then
            if [ "$instance" != "" -o "$start" != "" -o "$end" != "" -o "$config" != "" ]; then
               echo "Options \"-instance/-i\", \"-cmd/-c\", \"-start/-s\", \"-end/-e\" are not valid for aggregate report generating."
               echo "Do not use them for aggregate report generating."
               echo ""
               printPerHelp
               exit 1
            fi   
         fi 

         if [ "$add" != "" -a ! -f "$add" ]; then
            echo "Fsdb file $add does not exist."
            echo ""
            printPerHelp
            exit 1
         fi 

         if [ "$add" != "" -a ! -d "$db" ]; then
            echo "Database $db does not exist, add fsdb command cannot be executed."
            echo ""
            printPerHelp
            exit 1
         fi 
        
         if [ "$remove" != "" -a ! -d "$db" ]; then
            echo "Database $db does not exist."
            echo ""
            printPerHelp
            exit 1
         fi 

         if [ "$info" != "" ]; then
            if [ "$instance" != "" -o "$protocol" != "" -o "$start" != "" -o "$end" != "" -o "$config" != "" -o "$output" != "" -o "$format" != "" -o "$session" != "" -o "$add" != "" -o "$remove" != "" -o "$force" != "" ]; then
               echo "Warning: \"-info/-t\" has specified Database is not specified. Other option will be ignored."
               echo ""
            fi
         fi
      else
         if [ "$info" != "" ]; then
            echo "Database is not specified. Please specify with \"-db/-d\"."
            echo ""
            printPerHelp
            exit 1
         fi

         if [ "$file" = "" -a "$config" = "" ]; then
            echo "File is not specified. Please specify instance with \"-instance/-i\" or \"-cmd/-c\"."
            echo ""
            printPerHelp
            exit 1
         fi

         if [ "$instance" = "" -a "$config" = "" -a "$protocol" = "" ]; then
            echo "Instance is not specified. Please specify instance with \"-instance/-i\", \"-cmd/-c\" or \"-protocol/-p\"."
            echo ""
            printPerHelp
            exit 1
         fi

         if [ "$file" != "" -a ! -f "$file" ]; then
            echo "Fsdb file $file does not exist."
            echo ""
            printPerHelp
            exit 1
         fi
      fi

      ran_temp=$RANDOM
      perf_temp=perf_temp_${ran_temp}.tcl
      perf_temp_cfg=perf_temp_cfg_${ran_temp}.tcl

      if [ -f "$perf_temp" ]; then 
         rm "$perf_temp"
      fi 

      echo "#tcl created by verdi_perf" > "$perf_temp"
      echo "perfSetBatchMode" > "$perf_temp"

      if [ "$info" != "" ]; then
         if [ "$db" != "" ]; then
             echo "perfMultiSet -db $db -info" >> "$perf_temp"   
         fi
      elif [ "$db" != "" -a "$add" != "" ]; then
         if [ "$force" = "1" ]; then 
            echo "perfMultiSet -add $add -db $db -force" >> "$perf_temp"
         else
            echo "perfMultiSet -add $add -db $db" >> "$perf_temp"
         fi
      elif [ "$db" != "" -a "$remove" != "" ]; then
         echo "perfMultiSet -remove $remove -db $db" >> "$perf_temp"
      elif [ "$db" != "" -a "$add" = "" -a "$remove" = "" -a "$protocol" != "" ]; then
         if [ -f "$perf_temp_cfg" ]; then 
            rm "$perf_temp_cfg"
         fi 

         if [ "$start" != "" ]; then
            echo "perfSetTimeRange -begin $start" >> "$perf_temp_cfg"
         fi

         if [ "$end" != "" ]; then
            echo "perfSetTimeRange -end $end" >> "$perf_temp_cfg"
         fi

         if [ "$instance" != "" ]; then
            echo "perfEvaluate -protocol {$protocol} -instance $instance" >> "$perf_temp_cfg"
         else
            echo "perfEvaluate -protocol {$protocol}" >> "$perf_temp_cfg"
         fi         

         if [ "$config" != "" ]; then
            echo "perfMultiSet -protocol {$protocol} -config $config -db $db" >> "$perf_temp"
         else
            echo "perfMultiSet -protocol {$protocol} -config $perf_temp_cfg -db $db" >> "$perf_temp"
         fi      
      else
         if [ "$session" != "" ]; then
            if [ "$session" = "on" ]; then
               echo "perfSetSaveSession -on" >> "$perf_temp"
            elif [ "$session" = "off" ]; then
               echo "perfSetSaveSession -off" >> "$perf_temp"
            else
               echo "perfSetSaveSession -fail" >> "$perf_temp"
            fi
         fi      

         if [ "$file" != "" ]; then
            echo "perfSetFsdb -file $file" >> "$perf_temp"
         elif [ "$db" != "" ]; then
            echo "perfMultiSet -db $db" >> "$perf_temp"
         fi

         if [ "$db" = "" ]; then
            if [ "$start" != "" ]; then
               echo "perfSetTimeRange -begin $start" >> "$perf_temp"
            fi

            if [ "$end" != "" ]; then
               echo "perfSetTimeRange -end $end" >> "$perf_temp"
            fi

            if [ "$config" != "" ]; then
               echo "source $config" >> "$perf_temp"
            else
               if [ "$instance" != "" ]; then
                  if [ "$protocol" == "" ]; then
                     echo "perfEvaluate -instance $instance" >> "$perf_temp"
                  else
                     echo "perfEvaluate -protocol {$protocol} -instance $instance" >> "$perf_temp"
                  fi
               elif [ "$protocol" != "" ]; then
                  echo "perfEvaluate -protocol {$protocol}" >> "$perf_temp"
               fi
            fi
         else
            echo "perfMultiEvaluate" >> "$perf_temp" 
         fi

         if [ "$config" = "" ]; then      
            if [ "$format" = "html" ]; then
               if [ "$output" = "" ]; then
                  output="output"
               fi

               echo "perfSaveReport -file $output -format html" >> "$perf_temp"
            else
               if [ "$output" = "" ]; then
                  output="output.csv"
               fi

               echo "perfSaveReport -file $output -format csv" >> "$perf_temp"
            fi
         fi
      fi

      echo "debExit" >> "$perf_temp"

      #echo "$newname -nogui -play "$perf_temp""
      #echo "temp==================="
      #cat "$perf_temp"

      #echo "cfg==================="
      #if [ -f "$perf_temp_cfg" ]; then
      #   cat "$perf_temp_cfg"
      #fi

      if [ ${invoke_valgrind} = 1 ] ; then
         if [ ! -z "${SNPS_INFRA_INTERNAL_VERDI_VALGRIND}" ]; then
            valgrind_home=$VALGRIND_RELATED_PATH_SETTINGS;
         else
            VALGRIND_LIB="$SYS_INST_DIR/platform/$__NAME/bin/valgrind_lib";
            export VALGRIND_LIB;
            # SPSqa81719
            PURIFY_POOL_ARENA=1;
            PURIFY_POOL_ARENA_SILENCE=1;
            export PURIFY_POOL_ARENA;
            export PURIFY_POOL_ARENA_SILENCE;
            valgrind_home="$SYS_INST_DIR/platform/$__NAME/bin"
            valgrind_option=" --suppressions=$SYS_INST_DIR/platform/$__NAME/bin/valgrind_lib/sps.supp  $valgrind_option ";
         fi
         #echo "$valgrind_home/valgrind $valgrind_option $newname -nogui -play $perf_temp"
         $valgrind_home/valgrind $valgrind_option $newname -nogui "$verdiPackageMode" -play "$perf_temp"
      else 
         # echo "$newname "$verdiPackageMode" -play $perf_temp"
         $newname "$verdiPackageMode" -play "$perf_temp"
      fi

      rm "$perf_temp"
      if [ -f "$perf_temp_cfg" ]; then
         rm "$perf_temp_cfg"
      fi
      exit 0
   else
      if [ ${invoke_vdCov} = 1 ] ; then
         newname="$SYS_INST_DIR/platform/$__NAME/bin/vdCov"
      #elif [ ${invoke_iCSA} = 1 ] ; then
      #   newname="$SYS_INST_DIR/platform/$__NAME/bin/iCSA"
      elif [ ${invoke_verdi} = 1 ] ; then
         interactive_debug_file_eman=${EMAN_INTERACTIVE_DEBUG_FILE:=None}
         if [ ${skip_sim} = 1 ] ; then
             test -r ${interactive_debug_file_eman} && source ${interactive_debug_file_eman} ':' >& /dev/null
         else
             test -r ${interactive_debug_file_eman} && source ${interactive_debug_file_eman} >& /dev/null
         fi
      fi

      if [ ${invoke_valgrind} = 1 ] ; then
         if [ ! -z "${SNPS_INFRA_INTERNAL_VERDI_VALGRIND}" ]; then
            valgrind_home=$VALGRIND_RELATED_PATH_SETTINGS;
         else
            VALGRIND_LIB="$SYS_INST_DIR/platform/$__NAME/bin/valgrind_lib";
            export VALGRIND_LIB;
            # SPSqa81719
            PURIFY_POOL_ARENA=1;
            PURIFY_POOL_ARENA_SILENCE=1;
            export PURIFY_POOL_ARENA;
            export PURIFY_POOL_ARENA_SILENCE;
            valgrind_home="$SYS_INST_DIR/platform/$__NAME/bin"
            valgrind_option=" --suppressions=$SYS_INST_DIR/platform/$__NAME/bin/valgrind_lib/sps.supp  $valgrind_option ";
         fi
         exec $valgrind_home/valgrind $valgrind_option $newname "${argv[@]}"
      elif [ ${invoke_ddd} = 1 ] ; then
         exec ddd -arg $newname "${argv[@]}"
      elif [ ${invoke_cgdb} = 1 ] ; then
         exec cgdb -arg $newname "${argv[@]}"
      elif [ ${invoke_gdb} = 1 ] ; then
         exec gdb -arg $newname "${argv[@]}"
      elif [ ${invoke_gdb1} = 1 ] ; then
         exec ${SYS_INST_DIR}/platform/$__NAME/bin/gdb -arg $newname "${argv[@]}"
      elif [ ${invoke_undogdb} = 1 ] ; then
        if [ "${UNDODB_HOME}"x == "x" ]; then
            echo "Error: UNDODB_HOME not set"
            exit 1
        fi
        exec ${UNDODB_HOME}/udb --undodb-defer-recording --args $newname "${argv[@]}"
      elif [ ${invoke_undodb} = 1 ]; then
        if [ "${UNDODB_HOME}"x == "x" ]; then
            echo "Error: UNDODB_HOME not set"
            exit 1
        fi
        echo "DDD failed to pass arguments."
        exec ddd --debugger ${UNDODB_HOME}/udb --undodb-defer-recording $newname
      elif [ ${invoke_collect} = 1 ] ; then
         exec collect $collect_option $newname "${argv[@]}"
      elif [ "${VERDI_RUNNING_REGRESSION}x" != "x" ] && [ "${key}" == "-id" ] && [ "${SYS_PROG_NAME}" == "verdi" ] && [ -f ${SYS_INST_DIR}/bin/verdiidout ]; then
         ${CAT} ${SYS_INST_DIR}/bin/verdiidout
      elif [ "${TESTKDB_RUNNING_REGRESSION}x" != "x" ] && [ "${key}" == "-id" ] && [ "${SYS_PROG_NAME}" == "testkdb" ] && [ -f ${SYS_INST_DIR}/bin/testkdbidout ]; then
         ${CAT} ${SYS_INST_DIR}/bin/testkdbidout
      elif [ "${NOVAS_RUNNING_REGRESSION}x" != "x" ] && [ "${key}" == "-id" ] && [ "${SYS_PROG_NAME}" == "novas" ] && [ -f ${SYS_INST_DIR}/bin/novasidout ]; then
         ${CAT} ${SYS_INST_DIR}/bin/novasidout
      elif [ ${invoke_walker} = 1 ] ; then
         export FORCE_LOG_DASSERT=1
         export TURNOFF_PROGRESS_BAR=1
         _logDir=$($newname -h "${argv[@]}" | grep "logDir =" | cut -d' ' -f3)
         [ -n "$_logDir" ] && _logDirOpt="-logdir $_logDir" || _logDirOpt=""
         eval $newname -walker "$_logDirOpt" "${argv[@]}"
         eval ${SYS_INST_DIR}/platform/${__NAME}/bin/walker_rpt.csh "$_logDir" $?
      elif [ ! -z $SNPS_CONTAINER ]; then
         CONTAINER=$SYS_INST_DIR/bin/snps_container
         if [ ! -f ${CONTAINER} ]; then
             echo "Error: Cannot find ${CONTAINER##*/}";
             echo "       (under ${CONTAINER%/*}).";
             exit 1;
         fi
         if ${CONTAINER} -unsupported; then
             ${CONTAINER} -message;
             exit 1;
         fi
         exec ${CONTAINER} $newname "${argv[@]}"
      else
         exec $newname "${argv[@]}"
      fi
   fi

#
# 7).exit Novas
#
   exit 0
#
#
#
